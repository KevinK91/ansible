#!/bin/bash
#
# evaluate free system memory from Linux based systems
#
# Date: 2007-11-12
# Author: Thomas Borger - ESG
#
# the memory check is done with following command line:
# free -m | grep buffers/cache | awk '{ print $4 }'

# get arguments

#The warning and critical argument is currently not used
set -o errexit -o noclobber -o nounset -o pipefail
OPTS=$(getopt -o hu:wca: -l help,user,action: --name "$0" -- "$@")

if [ $? != 0 ] ; then echo "Failed parsing options." >&2 ; exit 1 ; fi

#echo "$OPTS"
eval set -- "$OPTS"

user="postgres"
file="/etc/repmgr/10/repmgr.conf"

while true; do
  case "$1" in
    -h|--help)  
        hlp=true
        shift
        shift
        ;;
    -u|--user)
        user=$2
        shift
        shift
        ;;
    -a|--action)
        action=$2
        shift
        shift
        ;;
    -f|--file)
        file=$2
        shift
        shift
        ;;
    -- ) 
        shift; 
        break 
        ;;
    *)  
        echo "Not implemented: $1" >&2
        exit 1
        ;;
  esac
done

# usage
HELP="
    usage: $0 [ -w value -c value -p -h ]

    syntax:

            -u --> To execute the replication commands on localhost
                   Default user is postgres
            -f --> Defines the replication configuration file
                   Default is /etc/repmgr/10/repmgr.conf
            -a --> Define which kind of check should be done
                  role: checks if the node has the expected role
                  replication-lag: checks if the node is lagging by more than replication_lag_warning or replication_lag_critical
                  archive-ready: checks for WAL files which have not yet been archived
                  downstream: checks that the expected downstream nodes are attached
                  slots: checks there are no inactive replication slots
"
#Check Arguments and exit if they are not set
if [ "$hlp" = "yes" ]; then
  echo "$HELP"
  exit 0
fi

if [ -z "$action" ]; then
  echo "CRITICAL - -a --> action must be set"
  echo "$HELP"
  exit 2
fi

case "$action" in
  "role")
  result=$(/usr/bin/repmgr node check -f $file --nagios --role)
  exitcode=$?
  if [[ $exitcode == 6 ]];then
  echo " REPMGR_SERVER_ROLE CRITICAL: node is not reachable"
  exit 2
  fi
  echo "$result"
  exit $exitcode
  ;;
  "replication-lag") 
  result=$(/usr/bin/repmgr node check -f $file --nagios --replication-lag)
  exitcode=$?
  if [[ $exitcode == 6 ]];then
  echo " REPMGR_SERVER_ROLE CRITICAL: node is not reachable"
  exit 2
  fi
  echo "$result"
  exit $exitcode
  ;;
  "archive-ready")
  result=$(/usr/bin/repmgr node check -f $file --nagios --archive-ready)
  exitcode=$?
  if [[ $exitcode == 6 ]];then
  echo " REPMGR_SERVER_ROLE CRITICAL: node is not reachable"
  exit 2
  fi
  echo "$result"
  exit $exitcode
  ;;
  "downstream")
  result=$(/usr/bin/repmgr node check -f $file --nagios --downstream)
  exitcode=$?
  if [[ $exitcode == 6 ]];then
  echo " REPMGR_SERVER_ROLE CRITICAL: node is not reachable"
  exit 2
  fi
  echo "$result"
  exit $exitcode
  ;;
  "slots") 
  result=$(/usr/bin/repmgr node check -f $file --nagios --slots)
  exitcode=$?
  if [[ $exitcode == 6 ]];then
  echo " REPMGR_SERVER_ROLE CRITICAL: node is not reachable"
  exit 2
  fi
  echo "$result"
  exit $exitcode
  ;;
esac


